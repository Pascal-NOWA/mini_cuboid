//BrainGrid Overview
//Written in the Dot language (See Graphviz)

digraph {
	 graph[splines=ortho,compound=true]




	subgraph clusterval {
		style = rounded
		bgcolor = grey90
		color = coral
		node [shape = record, color = coral];

		val[label = val, style = filled];
		val_attestation[label = val_attestation, style = filled];
		val_client_defs[label = val_client_defs, style = filled];
		val_framework[label = val_framework, style = filled];
		val_greentea[label = val_greentea, style = filled];
		val_interfaces[label = val_interfaces, style = filled];
		val_internal_trusted_storage[label = val_internal_trusted_storage, style = filled];
		val_protected_storage[label = val_protected_storage, style = filled];
		val_target[label = val_target, style = filled];
		val[label =< <B> val</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 0.44; // Node Separation
		ranksep = 0.44; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		val -> val_attestation [style=invis];
		val_client_defs -> val_attestation [style=invis];
		val_framework -> val_attestation [style=invis];
		val_target -> val_attestation [style=invis];

		val -> val_client_defs [style=invis];

		val -> val_greentea [style=invis];
		val_interfaces -> val_greentea [style=invis];

		val -> val_interfaces [style=invis];
		val_attestation -> val_interfaces [style=invis];
		val_client_defs -> val_interfaces [style=invis];
		val_greentea -> val_interfaces [style=invis];
		val_internal_trusted_storage -> val_interfaces [style=invis];
		val_protected_storage -> val_interfaces [style=invis];

		val -> val_internal_trusted_storage [style=invis];
		val_client_defs -> val_internal_trusted_storage [style=invis];
		val_framework -> val_internal_trusted_storage [style=invis];
		val_target -> val_internal_trusted_storage [style=invis];

		val -> val_protected_storage [style=invis];
		val_client_defs -> val_protected_storage [style=invis];
		val_framework -> val_protected_storage [style=invis];
		val_target -> val_protected_storage [style=invis];

		val -> val_target [style=invis];
	}//end subgraph val


	subgraph clusterpal {
		style = rounded
		bgcolor = grey90
		color = cyan
		node [shape = record, color = cyan];

		pal_common[label = pal_common, style = filled];
		pal_interfaces_ns[label = pal_interfaces_ns, style = filled];
		pal_mbed_os_intf[label = pal_mbed_os_intf, style = filled];
		pal[label =< <B> pal</B>>, style = bold, fillcolor = white, style = filled];


		//------LAYOUT FOR SUBGRAPH------


		rankdir = BT; // Rank Direction Bottom to Top
		nodesep = 0.44; // Node Separation
		ranksep = 0.44; // Rank Separation


		//INHERITANCE//



		//COMPOSITION//


		pal_common -> pal_mbed_os_intf [style=invis];
	}//end subgraph pal
//-------LAYOUT OF RELATIONSHIPS BETWEEN SUBGRAPHS------//
rankdir = BT; // Rank Direction Top to Bottom
nodesep = 0.11; // Node Separation
ranksep = 0.11; // Rank Separation


edge [color=cyan];
psa_attest_inject_key -> pal [arrowhead=ediamond, lhead = clusterpsa_attest_inject_key];
lifecycle -> pal [arrowhead=ediamond, lhead = clusterlifecycle];

edge [color=black];
val -> main [arrowhead=ediamond, ltail = clustermain,];

edge [color=cyan];
val -> pal [arrowhead=ediamond, ltail = clusterpal,lhead = clusterval];

edge [color=coral];
pal -> val [arrowhead=ediamond, ltail = clusterval,lhead = clusterpal];
psa_initial_attestation_api -> val [arrowhead=ediamond, lhead = clusterpsa_initial_attestation_api];
inttypes -> val [arrowhead=ediamond, lhead = clusterinttypes];

edge [color=cyan];
rtos -> pal [arrowhead=ediamond, lhead = clusterrtos];
}//End digraph declaration
